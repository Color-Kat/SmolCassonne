Index: server/src/Controllers/MultiPlayerController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {AbstractController} from \"./AbstractController.js\";\r\nimport {WebsocketRequestHandler, Instance as WSServerInstance} from \"express-ws\";\r\nimport {IUser} from \"../types/types\";\r\nimport {MultiplayerService} from \"../Services/MultiplayerService.js\";\r\nimport {WSClient} from \"../types/multiplayer\";\r\n\r\n// Common Multiplayer request\r\ninterface MultiPlayerRequest<T = undefined> {\r\n    userId: string;\r\n    roomId: string;\r\n    method: string;\r\n    user?: IUser;\r\n\r\n    data: T;\r\n}\r\n\r\ntype MultiplayerSyncRequest = MultiPlayerRequest<{\r\n    deck: any[]\r\n    map: any[];\r\n    teams: { [key: string]: any };\r\n}>;\r\n\r\n/**\r\n * This controller is responsible for multiplayer realization.\r\n * Here must not be a logic, the logic is placed in the multiplayer service.\r\n * This controller just provides an interface between request and multiplayer service.\r\n * This controller must get data from ws request and send data using ws. All logic is in the multiplayer service.\r\n */\r\nexport class MultiPlayerController extends AbstractController {\r\n    private ws: WSClient | null = null;\r\n\r\n    // /**\r\n    //  * Websocket server instance\r\n    //  * @private\r\n    //  */\r\n    // private wsServer;\r\n    //\r\n    /**\r\n     * All websocket connections\r\n     * @private\r\n     */\r\n    private aWss;\r\n\r\n    private multiplayerService: MultiplayerService;\r\n\r\n    constructor(wsServer: WSServerInstance) {\r\n        super();\r\n\r\n        // this.wsServer = wsServer;\r\n        this.aWss = wsServer.getWss();\r\n\r\n        this.multiplayerService = new MultiplayerService();\r\n    }\r\n\r\n    /* ------- Helpers ------- */\r\n    /**\r\n     * Broadcast data from callback to all clients of this roomId.\r\n     *\r\n     * @param roomId\r\n     * @param callback\r\n     * @param exclude\r\n     */\r\n    private broadcast = (roomId: string, callback: (client: WSClient) => {}, exclude?: WSClient) => {\r\n        this.aWss.clients.forEach((client: WSClient) => {\r\n            if (client.roomId !== roomId) return; // Skip other rooms\r\n            if (client === exclude) return;       // Skip excluded client\r\n\r\n            const result = callback(client);\r\n\r\n            // Send a message\r\n            client.send(JSON.stringify(result));\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Return websocket client by id.\r\n     * @param userId\r\n     */\r\n    private getClientById = (userId: string): WSClient | null => {\r\n        const client = Array.from(this.aWss.clients).find((client: WSClient) => {\r\n            return client.userId == userId;\r\n        }) ?? null;\r\n\r\n        return client;\r\n    }\r\n\r\n    private sendToUser(userId: string, data: any) {\r\n        const userWs = this.getClientById(userId);\r\n\r\n        userWs?.send(JSON.stringify(data));\r\n    }\r\n\r\n    /**\r\n     * Return array of the players from the roomId room.\r\n     * @param roomId\r\n     * @private\r\n     */\r\n    private getRoomPlayers(roomId: string): WSClient[] {\r\n        return [...this.aWss.clients].filter((client: WSClient) => client.roomId == roomId);\r\n    }\r\n\r\n    /* ------- Helpers ------- */\r\n\r\n    /**\r\n     * Parse data from ws request and run endpoint function by method.\r\n     *\r\n     * @param ws\r\n     * @param req\r\n     */\r\n    public initWebsocket: WebsocketRequestHandler = (ws, req): void => {\r\n        console.log('Client connected to the websocket server');\r\n        this.ws = ws;\r\n\r\n        this.ws.on('message', (message: string) => {\r\n            const request: MultiPlayerRequest<any> = JSON.parse(message);\r\n\r\n            switch (request.method) {\r\n                case 'setUserId':\r\n                    this.setUserIdHandler(request);\r\n                    break;\r\n\r\n                case 'joinRoom':\r\n                    this.joinRoomHandler(request);\r\n                    break;\r\n\r\n                case 'startGame':\r\n                    this.startGameHandler(request);\r\n                    break;\r\n\r\n                case 'leaveRoom':\r\n                    this.leaveRoomHandler(request);\r\n                    break;\r\n\r\n                case 'passTheMove':\r\n                    this.passTheMoveHandler(request);\r\n                    break;\r\n\r\n                default:\r\n                    console.log('Unknown method: ', request.method);\r\n                    break;\r\n            }\r\n        });\r\n    };\r\n\r\n    /* ------- Handlers ------- */\r\n\r\n    public setUserIdHandler(request: MultiPlayerRequest): void {\r\n        if (!this.ws) return;\r\n        this.ws.userId = request.userId;\r\n    }\r\n\r\n    /**\r\n     * Send a message about new player to all clients of this roomId\r\n     * And initiate an assigning a team for the new player.\r\n     *\r\n     * @param request\r\n     */\r\n    public joinRoomHandler(request: MultiPlayerRequest): void {\r\n        if (!this.ws) return;\r\n\r\n        const {result, message} = this.multiplayerService.joinRoom(request.roomId);\r\n\r\n        if (result) {\r\n            // Send a message about new player\r\n            this.broadcast(request.roomId, (client: WSClient) => {\r\n                return {\r\n                    method: 'message',\r\n                    message: \"Новый игрок подключился к комнате \" + request.roomId\r\n                }\r\n            });\r\n\r\n            this.initPlayer(request);\r\n\r\n            this.joinNewPlayer(request);\r\n        } else {\r\n            // User can't join this room\r\n            this.ws.send(JSON.stringify({\r\n                method: 'message',\r\n                message: message ?? 'Не удалось подключиться к комнате ' + request.roomId\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Init player.\r\n     * Save user data for this ws connection,\r\n     * Assign a team for the new player.\r\n     * And send setMyTeam event to this player.\r\n     *\r\n     * @param request\r\n     */\r\n    public initPlayer(request: MultiPlayerRequest): void {\r\n        const client = this.getClientById(request.userId);\r\n        if (!client) return;\r\n        const roomId = request.roomId;\r\n\r\n        // Get team for just connected player\r\n        const team = this.multiplayerService.getFreeTeam(this.getRoomPlayers(roomId));\r\n\r\n        // Save user data for this ws connection\r\n        client.roomId = request.roomId;\r\n        client.user = request.user;\r\n        client.team = team;\r\n        client.isCurrentPlayer = false;\r\n\r\n        // Send to just connected user his team\r\n        client.send(JSON.stringify({\r\n            method: 'setMyTeam',\r\n            team: client.team\r\n        }));\r\n    }\r\n\r\n    public joinNewPlayer(request: MultiPlayerRequest): void {\r\n        const roomId = request.roomId;\r\n\r\n        // Get list of teams that are connected to this room\r\n        const teamsList = this.multiplayerService.getTeamsList(this.getRoomPlayers(roomId));\r\n\r\n        // Send a message about new player\r\n        this.broadcast(roomId, (client: WSClient) => ({\r\n            method: 'joinNewPlayer',\r\n            teamsList\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Send event \"startGame\" with list of teams that are connected to this room.\r\n     * Send event \"passTheMove\" to the player, who started this game, with isCurrentPlayer property.\r\n     * @param request\r\n     */\r\n    public startGameHandler(request: MultiPlayerRequest): void {\r\n        // Mark this room as game started\r\n        this.multiplayerService.startGame(request.roomId);\r\n\r\n        // Send a message about new player\r\n        this.broadcast(request.roomId, (client: WSClient) => ({\r\n            method: 'startGame',\r\n        }));\r\n\r\n        // Pass the move to the player, who started this game\r\n        setTimeout(() => this.passTheFirstMoveHandler(request), 250);\r\n    }\r\n\r\n    /**\r\n     * Send message about player disconnect\r\n     * and remove him from this room.\r\n     * @param request\r\n     */\r\n    public leaveRoomHandler(request: MultiPlayerRequest): void {\r\n        const client = this.getClientById(request.userId);\r\n        if (!client) return;\r\n        const roomId = request.roomId;\r\n\r\n        const isGameStarted = this.multiplayerService.checkIfGameStarted(roomId);\r\n\r\n        // Pass the turn to the next player\r\n        // before the player leaves the room\r\n        if(isGameStarted)\r\n            this.passTheMoveHandler(request as any, false);\r\n\r\n        // Delete data about current game of the client\r\n        delete client.roomId;\r\n        delete client.user;\r\n        delete client.team;\r\n        delete client.isCurrentPlayer;\r\n\r\n        // Send a message to all users\r\n        this.broadcast(roomId, (client: WSClient) => ({\r\n            method: 'message',\r\n            message: `Пользователь ${request.user?.name} покинул игру`\r\n        }));\r\n\r\n        // Update data about rooms\r\n        this.multiplayerService.leaveRoom(roomId);\r\n\r\n        // Get teamsList after leaving player\r\n        const teamsList = this.multiplayerService.getTeamsList(\r\n            this.getRoomPlayers(roomId),\r\n            client.team\r\n        );\r\n\r\n        // Send a message about new teamsList\r\n        this.broadcast(roomId, (client: WSClient) => ({\r\n            method: 'playerLeaveRoom',\r\n            teamsList\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Pass the move to the player in this.ws (the player, who started this game).\r\n     *\r\n     * @param request\r\n     */\r\n    public passTheFirstMoveHandler = (request: MultiPlayerRequest): void => {\r\n        // Player, who started the game, moves first\r\n        this.broadcast(request.roomId, (client: WSClient) => {\r\n            client.isCurrentPlayer = this.ws?.user?.id == client.user?.id;\r\n\r\n            // Sync data between all players\r\n            return {\r\n                isCurrentPlayer: this.ws?.user?.id == client.user?.id,\r\n                method: 'passTheMove',\r\n            };\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Pass the turn to the next player.\r\n     * Set isCurrentPlayer = false for all players besides the new active player.\r\n     *\r\n     * @param request\r\n     * @param syncData\r\n     */\r\n    public passTheMoveHandler = (request: MultiplayerSyncRequest, syncData: boolean = true): void => {\r\n        const roomId = request.roomId;\r\n\r\n        // Get the next player user id\r\n        const nextPlayerId = this.multiplayerService.getNextPlayerId(this.getRoomPlayers(roomId));\r\n\r\n        this.broadcast(roomId, (client: WSClient) => {\r\n            // Pass the turn\r\n            client.isCurrentPlayer = client.user?.id == nextPlayerId;\r\n\r\n            // Sync data between all players\r\n            return {\r\n                isCurrentPlayer: client.user?.id == nextPlayerId,\r\n                method: 'passTheMove',\r\n            };\r\n        });\r\n\r\n        if (syncData)\r\n            this.syncDataHandler(request);\r\n    };\r\n\r\n    /**\r\n     * Sync data between all players connected to this room.\r\n     * @param request\r\n     */\r\n    public syncDataHandler = (request: MultiplayerSyncRequest): void => {\r\n        const roomId = request.roomId;\r\n\r\n        // Sync data to all players\r\n        this.broadcast(roomId, (client: WSClient) => {\r\n            return {\r\n                data: request.data,\r\n                method: 'syncData',\r\n            };\r\n        });\r\n\r\n        const {isOver, gameResult} = this.multiplayerService.checkGameResult(\r\n            roomId,\r\n            this.getRoomPlayers(roomId),\r\n            request.data.deck,\r\n            request.data.teams\r\n        );\r\n\r\n        // Game is over\r\n        if (isOver) {\r\n            this.broadcast(roomId, (client: WSClient) => ({\r\n                gameResult: gameResult,\r\n                method: 'gameOver',\r\n            }));\r\n        }\r\n    }\r\n    /* ------- Handlers ------- */\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/Controllers/MultiPlayerController.ts b/server/src/Controllers/MultiPlayerController.ts
--- a/server/src/Controllers/MultiPlayerController.ts	(revision 90e0dabbebcbbeaaa717f835ee84350936ba5ac5)
+++ b/server/src/Controllers/MultiPlayerController.ts	(date 1699516251841)
@@ -147,6 +147,11 @@
     public setUserIdHandler(request: MultiPlayerRequest): void {
         if (!this.ws) return;
         this.ws.userId = request.userId;
+
+        this.sendToUser(request.userId, {
+            method: 'setFreeRooms',
+            rooms: this.multiplayerService.getFreeRooms()
+        })
     }
 
     /**
